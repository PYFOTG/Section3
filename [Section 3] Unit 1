Unit 1. [자료구조/알고리즘] 재귀

#Chapter 1. 재귀의 이해

1. 재귀의 개념
: 재귀함수 = 자기 자신을 호출하는 함수

2. 재귀로 문제 해결하기
  1) 문제를 작게 쪼개기
  2) 문제를 가장 작은 단위로 쪼개기
  3) 문제 해결하기
  4) 재귀의 사용이 적절한 상황
  5) 주어진 문제를 비슷한 구조의 더 작은 문제로 나눌 수 있는 경우
  6) 중첩된 반복문이 많거나 반복문의 중첩 횟수(number of loops)를 예측하기 어려운 경우
  
  
#Chapter 2. 재귀의 활용

1. 재귀함수의 입력값&출력값 정의하기
: 문제를 가장 추상적으로 또는, 가장 단순하게 정의하는 것.
: 함수의 입출력값을 정의하는 것은 그 첫 출발점이며, 재귀 함수를 통해 풀고자 하는 문제, 즉 도달하고자 하는 목표를 정의하는 데 도움이 된다.

2. 문제를 쪼개고 경우의 수를 나누기
: 문제를 쪼갤 기준을 정하고, 정한 기준에 따라 문제를 더 큰 경우와 작은 경우로 구분할 수 있는지 확인.
: 일반적으로 입력값을 이 기준으로 정함. 이때 중요한 관점은 입력값이나 문제의 순서와 크기입니다. 주어진 입력값 또는 문제 상황을 크기로 구분할 수 있거나, 순서를 명확하게 정할 수 있다면 문제를 구분하는 데 도움이 됨
: 구분된 문제를 푸는 방식이 순서나 크기와 관계없이 모두 같다면, 문제를 제대로 구분한 것.

3. 단순한 문제 해결하기
: 문제를 여러 경우로 구분한 다음에는, 가장 해결하기 쉬운 문제부터 해결함. 이를 재귀의 기초(base case)라고 부름.
: 재귀의 기초는 나중에 재귀 함수를 구현할 때, 재귀의 탈출 조건(재귀 호출이 멈추는 조건)을 구성

4. 복잡한 문제 해결하기
: 남아있는 경우 해결함.

5. 코드 구현하기

6. 일반적인 재귀함수의 템플릿
function recursive(input1, input2, ...) {
  // base case : 문제를 더 이상 쪼갤 수 없는 경우
  if (문제를 더 이상 쪼갤 수 없을 경우) {
    return 단순한 문제의 해답;
  }

  // recursive case : 그렇지 않은 경우
  return 더 작은 문제로 새롭게 정의된 문제
}

#Chapter 연습문제

#Chapter 과제
